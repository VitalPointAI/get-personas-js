"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.decodeCleartext = exports.prepareCleartext = exports.decodeIdentityCID = exports.encodeIdentityCID = exports.encodePayload = void 0;
const ipld_dag_cbor_1 = __importDefault(require("ipld-dag-cbor"));
const cids_1 = __importDefault(require("cids"));
const multihashes_1 = __importDefault(require("multihashes"));
const u8a = __importStar(require("uint8arrays"));
const varint_1 = __importDefault(require("varint"));
const DAG_CBOR_CODE = 113;
const ID_MULTIHASH = 0;
const ENC_BLOCK_SIZE = 24;
function encodePayload(payload) {
    return __awaiter(this, void 0, void 0, function* () {
        const block = new Uint8Array(ipld_dag_cbor_1.default.util.serialize(payload));
        return {
            cid: yield ipld_dag_cbor_1.default.util.cid(block),
            linkedBlock: block,
        };
    });
}
exports.encodePayload = encodePayload;
function pad(b, blockSize = ENC_BLOCK_SIZE) {
    const padLen = (blockSize - (b.length % blockSize)) % blockSize;
    return u8a.concat([b, new Uint8Array(padLen)]);
}
function unpadCIDBytes(b) {
    let offset = 0;
    let mhLen;
    for (let i = 0; i < 4; i++) {
        mhLen = varint_1.default.decode(b, offset);
        offset += varint_1.default.decode.bytes;
    }
    return new cids_1.default(b.slice(0, offset + mhLen));
}
function encodeIdentityCID(obj) {
    const block = ipld_dag_cbor_1.default.util.serialize(obj);
    const idMultiHash = multihashes_1.default.encode(block, ID_MULTIHASH);
    return new cids_1.default(1, DAG_CBOR_CODE, idMultiHash);
}
exports.encodeIdentityCID = encodeIdentityCID;
function decodeIdentityCID(cid) {
    cids_1.default.validateCID(cid);
    if (cid.code !== DAG_CBOR_CODE)
        throw new Error('CID codec must be dag-cbor');
    const { code, digest } = multihashes_1.default.decode(cid.multihash);
    if (code !== ID_MULTIHASH)
        throw new Error('CID must use identity multihash');
    return ipld_dag_cbor_1.default.util.deserialize(digest);
}
exports.decodeIdentityCID = decodeIdentityCID;
function prepareCleartext(cleartext, blockSize) {
    return pad(encodeIdentityCID(cleartext).bytes, blockSize);
}
exports.prepareCleartext = prepareCleartext;
function decodeCleartext(b) {
    return decodeIdentityCID(unpadCIDBytes(b));
}
exports.decodeCleartext = decodeCleartext;
//# sourceMappingURL=index.js.map