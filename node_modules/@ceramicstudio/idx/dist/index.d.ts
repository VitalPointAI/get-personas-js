import type { CeramicApi } from '@ceramicnetwork/common';
import type StreamID from '@ceramicnetwork/streamid';
import { DoctypeProxy, TileDoc } from './doctypes';
import type { Aliases, DefinitionWithID, Entry, Index, IndexKey } from './types';
export { getLegacy3BoxProfileAsBasicProfile } from './3box';
export * from './types';
export * from './utils';
export interface CreateOptions {
    pin?: boolean;
}
export interface IDXOptions {
    aliases?: Aliases;
    autopin?: boolean;
    ceramic: CeramicApi;
}
export declare class IDX {
    _aliases: Aliases;
    _autopin: boolean;
    _ceramic: CeramicApi;
    _indexProxy: DoctypeProxy;
    constructor({ aliases, autopin, ceramic }: IDXOptions);
    get authenticated(): boolean;
    get ceramic(): CeramicApi;
    get id(): string;
    has(name: string, did?: string): Promise<boolean>;
    get<T = unknown>(name: string, did?: string): Promise<T | null>;
    set(name: string, content: Record<string, any>, options?: CreateOptions): Promise<StreamID>;
    merge<T extends Record<string, unknown> = Record<string, unknown>>(name: string, content: T, options?: CreateOptions): Promise<StreamID>;
    setAll(contents: Record<string, Record<string, any>>, options?: CreateOptions): Promise<Index>;
    setDefaults(contents: Record<string, Record<string, any>>, options?: CreateOptions): Promise<Index>;
    remove(name: string): Promise<void>;
    _toIndexKey(name: string): IndexKey;
    getIndex(did?: string): Promise<Index | null>;
    iterator(did?: string): AsyncIterableIterator<Entry>;
    _createIDXDoc(did: string): Promise<TileDoc>;
    _getIDXDoc(did: string): Promise<TileDoc | null>;
    _getOwnIDXDoc(): Promise<TileDoc>;
    getDefinition(idOrKey: StreamID | IndexKey): Promise<DefinitionWithID>;
    getRecordID(key: IndexKey, did?: string): Promise<string | null>;
    getRecordDocument(key: IndexKey, did?: string): Promise<TileDoc | null>;
    _getRecord<T = unknown>(key: IndexKey, did?: string): Promise<T | null>;
    _setRecord(key: IndexKey, content: Record<string, any>, options?: CreateOptions): Promise<StreamID>;
    _setRecordOnly(key: IndexKey, content: Record<string, any>, { pin }?: CreateOptions): Promise<[boolean, StreamID]>;
    _loadDocument(id: StreamID | string): Promise<TileDoc>;
    _createRecord(definition: DefinitionWithID, content: Record<string, any>, { pin }?: CreateOptions): Promise<StreamID>;
    _getReference(key: IndexKey, did?: string): Promise<string | null>;
    _setReference(key: IndexKey, id: StreamID): Promise<void>;
    _setReferences(references: Index): Promise<void>;
    _removeReference(key: IndexKey): Promise<void>;
    caip10ToDid(accountId: string): Promise<string>;
}
