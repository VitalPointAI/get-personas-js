import type { TileDocument } from '@ceramicnetwork/stream-tile';
export declare type TileContent = Record<string, any> | null;
export declare type TileDoc = TileDocument<TileContent>;
export declare type MutationFunc = (current: TileDoc) => Promise<TileDoc>;
declare type RejectFunc = (error: Error) => void;
declare type QueueItem<TileDoc> = {
    reject: RejectFunc;
    run: (value: TileDoc) => Promise<void>;
};
export declare class DoctypeProxy {
    _getRemote: () => Promise<TileDoc>;
    _getPromise: Promise<TileDoc> | null;
    _queue: Array<QueueItem<TileDoc>>;
    _promiseValue: Promise<TileDoc>;
    _deferValue: {
        resolve: (value: TileDoc) => any;
        reject: RejectFunc;
    };
    constructor(getRemote: () => Promise<TileDoc>);
    _createValuePromise(): void;
    change(mutation: MutationFunc): Promise<void>;
    changeContent(change: (content: TileContent) => TileContent): Promise<void>;
    get(): Promise<TileDoc>;
    _start(): Promise<void>;
    _next(value: TileDoc): void;
    _end(value: TileDoc): void;
}
export {};
