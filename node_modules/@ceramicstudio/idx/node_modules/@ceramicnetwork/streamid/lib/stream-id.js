"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var _StreamID_type, _StreamID_cid;
Object.defineProperty(exports, "__esModule", { value: true });
exports.StreamID = void 0;
const cids_1 = __importDefault(require("cids"));
const multibase_1 = __importDefault(require("multibase"));
const varint_1 = __importDefault(require("varint"));
const ipld_dag_cbor_1 = __importDefault(require("ipld-dag-cbor"));
const concat_1 = __importDefault(require("uint8arrays/concat"));
const to_string_1 = __importDefault(require("uint8arrays/to-string"));
const constants_1 = require("./constants");
const reading_bytes_1 = require("./reading-bytes");
const typescript_memoize_1 = require("typescript-memoize");
const commit_id_1 = require("./commit-id");
const stream_type_1 = require("./stream-type");
function fromBytes(bytes) {
    const result = fromBytesNoThrow(bytes);
    if (result instanceof Error) {
        throw result;
    }
    return result;
}
function fromBytesNoThrow(bytes) {
    const [streamCodec, streamCodecRemainder] = reading_bytes_1.readVarint(bytes);
    if (streamCodec !== constants_1.STREAMID_CODEC)
        return new Error('fromBytes: invalid streamid, does not include streamid codec');
    const [type, streamTypeRemainder] = reading_bytes_1.readVarint(streamCodecRemainder);
    const cidResult = reading_bytes_1.readCidNoThrow(streamTypeRemainder);
    if (cidResult instanceof Error) {
        return cidResult;
    }
    const [cid, cidRemainder] = cidResult;
    if (cidRemainder.length > 0) {
        return new Error(`Invalid StreamID: contains commit`);
    }
    return new StreamID(type, cid);
}
function fromString(input) {
    const result = fromStringNoThrow(input);
    if (result instanceof Error) {
        throw result;
    }
    return result;
}
function fromStringNoThrow(input) {
    const protocolFree = input.replace('ceramic://', '').replace('/ceramic/', '');
    const commitFree = protocolFree.includes('commit') ? protocolFree.split('?')[0] : protocolFree;
    const bytes = multibase_1.default.decode(commitFree);
    return fromBytesNoThrow(bytes);
}
const TAG = Symbol.for('@ceramicnetwork/streamid/StreamID');
class StreamID {
    constructor(type, cid) {
        this._tag = TAG;
        _StreamID_type.set(this, void 0);
        _StreamID_cid.set(this, void 0);
        if (!(type || type === 0))
            throw new Error('constructor: type required');
        if (!cid)
            throw new Error('constructor: cid required');
        __classPrivateFieldSet(this, _StreamID_type, typeof type === 'string' ? stream_type_1.StreamType.codeByName(type) : type, "f");
        __classPrivateFieldSet(this, _StreamID_cid, typeof cid === 'string' ? new cids_1.default(cid) : cid, "f");
    }
    static isInstance(instance) {
        return typeof instance === 'object' && '_tag' in instance && instance._tag === TAG;
    }
    static async fromGenesis(type, genesis) {
        const cid = await ipld_dag_cbor_1.default.util.cid(new Uint8Array(ipld_dag_cbor_1.default.util.serialize(genesis)));
        return new StreamID(type, cid);
    }
    get type() {
        return __classPrivateFieldGet(this, _StreamID_type, "f");
    }
    get typeName() {
        return stream_type_1.StreamType.nameByCode(__classPrivateFieldGet(this, _StreamID_type, "f"));
    }
    get cid() {
        return __classPrivateFieldGet(this, _StreamID_cid, "f");
    }
    get bytes() {
        const codec = varint_1.default.encode(constants_1.STREAMID_CODEC);
        const type = varint_1.default.encode(this.type);
        return concat_1.default([codec, type, this.cid.bytes]);
    }
    get baseID() {
        return new StreamID(__classPrivateFieldGet(this, _StreamID_type, "f"), __classPrivateFieldGet(this, _StreamID_cid, "f"));
    }
    atCommit(commit) {
        return new commit_id_1.CommitID(__classPrivateFieldGet(this, _StreamID_type, "f"), __classPrivateFieldGet(this, _StreamID_cid, "f"), commit);
    }
    equals(other) {
        if (StreamID.isInstance(other)) {
            return this.type === other.type && this.cid.equals(other.cid);
        }
        else {
            return false;
        }
    }
    toString() {
        return to_string_1.default(multibase_1.default.encode(constants_1.DEFAULT_BASE, this.bytes));
    }
    toUrl() {
        return `ceramic://${this.toString()}`;
    }
    [(_StreamID_type = new WeakMap(), _StreamID_cid = new WeakMap(), Symbol.for('nodejs.util.inspect.custom'))]() {
        return `StreamID(${this.toString()})`;
    }
    [Symbol.toPrimitive]() {
        return this.toString();
    }
}
StreamID.fromBytes = fromBytes;
StreamID.fromBytesNoThrow = fromBytesNoThrow;
StreamID.fromString = fromString;
StreamID.fromStringNoThrow = fromStringNoThrow;
__decorate([
    typescript_memoize_1.Memoize(),
    __metadata("design:type", String),
    __metadata("design:paramtypes", [])
], StreamID.prototype, "typeName", null);
__decorate([
    typescript_memoize_1.Memoize(),
    __metadata("design:type", Uint8Array),
    __metadata("design:paramtypes", [])
], StreamID.prototype, "bytes", null);
__decorate([
    typescript_memoize_1.Memoize(),
    __metadata("design:type", StreamID),
    __metadata("design:paramtypes", [])
], StreamID.prototype, "baseID", null);
__decorate([
    typescript_memoize_1.Memoize(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", String)
], StreamID.prototype, "toString", null);
__decorate([
    typescript_memoize_1.Memoize(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", String)
], StreamID.prototype, "toUrl", null);
exports.StreamID = StreamID;
//# sourceMappingURL=stream-id.js.map