"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.readCidNoThrow = exports.readCid = exports.readVarint = void 0;
const cids_1 = __importDefault(require("cids"));
const varint_1 = __importDefault(require("varint"));
function readVarint(bytes) {
    const value = varint_1.default.decode(bytes);
    const readLength = varint_1.default.decode.bytes;
    const remainder = bytes.slice(readLength);
    return [value, remainder, readLength];
}
exports.readVarint = readVarint;
function isCidVersion(input) {
    return input === 0 || input === 1;
}
function readCid(bytes) {
    const result = readCidNoThrow(bytes);
    if (result instanceof Error) {
        throw result;
    }
    return result;
}
exports.readCid = readCid;
function readCidNoThrow(bytes) {
    const [cidVersion, cidVersionRemainder] = readVarint(bytes);
    if (!isCidVersion(cidVersion)) {
        return new Error(`Unknown CID version ${cidVersion}`);
    }
    const [codec, codecRemainder] = readVarint(cidVersionRemainder);
    const [, mhCodecRemainder, mhCodecLength] = readVarint(codecRemainder);
    const [mhLength, , mhLengthLength] = readVarint(mhCodecRemainder);
    const multihashBytes = codecRemainder.slice(0, mhCodecLength + mhLengthLength + mhLength);
    const multihashBytesRemainder = codecRemainder.slice(mhCodecLength + mhLengthLength + mhLength);
    return [new cids_1.default(cidVersion, codec, multihashBytes), multihashBytesRemainder];
}
exports.readCidNoThrow = readCidNoThrow;
//# sourceMappingURL=reading-bytes.js.map