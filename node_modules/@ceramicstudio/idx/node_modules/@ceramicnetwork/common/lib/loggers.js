"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ServiceLogger = exports.DiagnosticsLogger = void 0;
const logger_1 = require("@overnightjs/logger");
const logfmt = __importStar(require("logfmt"));
const util_1 = __importDefault(require("util"));
const flat_1 = __importDefault(require("flat"));
const logger_base_1 = require("./logger-base");
class DiagnosticsLogger extends logger_base_1.DiagnosticsLoggerBase {
    constructor(logLevel, logToFiles, fileLogger) {
        super(logLevel, logToFiles, fileLogger);
        const removeTimestamp = true;
        this.logger = new logger_1.Logger("CONSOLE", '', removeTimestamp);
    }
    log(style, content) {
        this.logger[style](content, this.includeStackTrace);
        if (this.logToFiles) {
            const now = new Date();
            const message = `[${now.toUTCString()}] ${content}\n`;
            this.fileLogger.write(message);
        }
    }
}
exports.DiagnosticsLogger = DiagnosticsLogger;
class ServiceLogger extends logger_base_1.ServiceLoggerBase {
    write(message) {
        super.write(message);
        if (this.logToFiles) {
            const now = new Date();
            message = `[${now.toUTCString()}] service=${this.service} ${util_1.default
                .format(message, '\n')
                .replace(/\n\s*\n$/, '\n')}`;
            this.stream.write(message);
        }
    }
    format(serviceLog) {
        return logfmt.stringify(flat_1.default(serviceLog));
    }
}
exports.ServiceLogger = ServiceLogger;
//# sourceMappingURL=loggers.js.map