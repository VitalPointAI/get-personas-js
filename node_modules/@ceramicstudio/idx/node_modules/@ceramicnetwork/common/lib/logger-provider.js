"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.LoggerProvider = void 0;
const loggers_1 = require("./loggers");
const logger_base_1 = require("./logger-base");
const path_1 = __importDefault(require("path"));
const os_1 = __importDefault(require("os"));
class LoggerProvider extends logger_base_1.LoggerProviderBase {
    _getLogPath(filename) {
        if (!this.config.logToFiles) {
            throw new Error('Tried to generate log path when logToFiles is false');
        }
        const logDirectory = this.config.logDirectory || path_1.default.join(os_1.default.homedir(), '.ceramic', 'logs/');
        return path_1.default.join(logDirectory, filename);
    }
    _makeDiagnosticLogger() {
        let stream = null;
        if (this.config.logToFiles) {
            stream = this._fileLoggerFactory(this._getLogPath('diagnostics.log'));
        }
        return new loggers_1.DiagnosticsLogger(this.config.logLevel, this.config.logToFiles, stream);
    }
    makeServiceLogger(serviceName, fileName) {
        let stream = null;
        if (this.config.logToFiles) {
            const logName = fileName || serviceName;
            stream = this._fileLoggerFactory(this._getLogPath(`${logName}.log`));
        }
        return new loggers_1.ServiceLogger(serviceName, this.config.logLevel, this.config.logToFiles, stream);
    }
}
exports.LoggerProvider = LoggerProvider;
//# sourceMappingURL=logger-provider.js.map