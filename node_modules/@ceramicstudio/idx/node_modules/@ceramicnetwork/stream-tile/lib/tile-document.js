"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var TileDocument_1;
Object.defineProperty(exports, "__esModule", { value: true });
exports.TileDocument = void 0;
const fast_json_patch_1 = __importDefault(require("fast-json-patch"));
const uint8arrays = __importStar(require("uint8arrays"));
const random_1 = require("@stablelib/random");
const common_1 = require("@ceramicnetwork/common");
const streamid_1 = require("@ceramicnetwork/streamid");
const DEFAULT_CREATE_OPTS = { anchor: true, publish: true, sync: common_1.SyncOptions.PREFER_CACHE };
const DEFAULT_LOAD_OPTS = { sync: common_1.SyncOptions.PREFER_CACHE };
const DEFAULT_UPDATE_OPTS = { anchor: true, publish: true, throwOnInvalidCommit: true };
function headerFromMetadata(metadata, genesis) {
    var _a, _b;
    if (typeof (metadata === null || metadata === void 0 ? void 0 : metadata.schema) === 'string') {
        try {
            streamid_1.CommitID.fromString(metadata.schema);
        }
        catch (_c) {
            throw new Error('Schema must be a CommitID');
        }
    }
    const header = {
        controllers: metadata === null || metadata === void 0 ? void 0 : metadata.controllers,
        family: metadata === null || metadata === void 0 ? void 0 : metadata.family,
        schema: (_a = metadata === null || metadata === void 0 ? void 0 : metadata.schema) === null || _a === void 0 ? void 0 : _a.toString(),
        tags: metadata === null || metadata === void 0 ? void 0 : metadata.tags,
    };
    if (genesis) {
        if (!(metadata === null || metadata === void 0 ? void 0 : metadata.deterministic)) {
            header.unique = uint8arrays.toString(random_1.randomBytes(12), 'base64');
        }
        if (metadata === null || metadata === void 0 ? void 0 : metadata.forbidControllerChange) {
            header.forbidControllerChange = true;
        }
    }
    else {
        if ((metadata === null || metadata === void 0 ? void 0 : metadata.deterministic) !== undefined || ((_b = metadata) === null || _b === void 0 ? void 0 : _b.unique) !== undefined) {
            throw new Error("Cannot change 'deterministic' or 'unique' properties on existing Streams");
        }
        if ((metadata === null || metadata === void 0 ? void 0 : metadata.forbidControllerChange) !== undefined) {
            throw new Error("Cannot change 'forbidControllerChange' property on existing Streams");
        }
    }
    Object.keys(header).forEach((key) => header[key] === undefined && delete header[key]);
    return header;
}
async function _ensureAuthenticated(signer) {
    if (signer.did == null) {
        throw new Error('No DID provided');
    }
    if (!signer.did.authenticated) {
        await signer.did.authenticate();
        if (signer.loggerProvider) {
            signer.loggerProvider.getDiagnosticsLogger().imp(`Now authenticated as DID ${signer.did.id}`);
        }
    }
}
async function _signDagJWS(signer, commit) {
    await _ensureAuthenticated(signer);
    return signer.did.createDagJWS(commit);
}
async function throwReadOnlyError() {
    throw new Error('Historical stream commits cannot be modified. Load the stream without specifying a commit to make updates.');
}
let TileDocument = TileDocument_1 = class TileDocument extends common_1.Stream {
    constructor() {
        super(...arguments);
        this._isReadOnly = false;
    }
    get content() {
        return super.content;
    }
    static async create(ceramic, content, metadata, opts = {}) {
        opts = { ...DEFAULT_CREATE_OPTS, ...opts };
        if (!(metadata === null || metadata === void 0 ? void 0 : metadata.deterministic) && opts.syncTimeoutSeconds == undefined) {
            opts.syncTimeoutSeconds = 0;
        }
        const commit = await TileDocument_1.makeGenesis(ceramic, content, metadata);
        return ceramic.createStreamFromGenesis(TileDocument_1.STREAM_TYPE_ID, commit, opts);
    }
    static async createFromGenesis(ceramic, genesisCommit, opts = {}) {
        var _a;
        opts = { ...DEFAULT_CREATE_OPTS, ...opts };
        if (((_a = genesisCommit.header) === null || _a === void 0 ? void 0 : _a.unique) && opts.syncTimeoutSeconds == undefined) {
            opts.syncTimeoutSeconds = 0;
        }
        const commit = genesisCommit.data ? await _signDagJWS(ceramic, genesisCommit) : genesisCommit;
        return ceramic.createStreamFromGenesis(TileDocument_1.STREAM_TYPE_ID, commit, opts);
    }
    static async deterministic(ceramic, metadata, opts = {}) {
        opts = { ...DEFAULT_CREATE_OPTS, ...opts };
        metadata = { ...metadata, deterministic: true };
        if (metadata.family == null && metadata.tags == null) {
            throw new Error('Family and/or tags are required when creating a deterministic tile document');
        }
        const commit = await TileDocument_1.makeGenesis(ceramic, null, metadata);
        return ceramic.createStreamFromGenesis(TileDocument_1.STREAM_TYPE_ID, commit, opts);
    }
    static async load(ceramic, streamId, opts = {}) {
        opts = { ...DEFAULT_LOAD_OPTS, ...opts };
        const streamRef = streamid_1.StreamRef.from(streamId);
        if (streamRef.type != TileDocument_1.STREAM_TYPE_ID) {
            throw new Error(`StreamID ${streamRef.toString()} does not refer to a '${TileDocument_1.STREAM_TYPE_NAME}' stream, but to a ${streamRef.typeName}`);
        }
        return ceramic.loadStream(streamRef, opts);
    }
    async update(content, metadata, opts = {}) {
        opts = { ...DEFAULT_UPDATE_OPTS, ...opts };
        const signer = opts.asDID ? { did: opts.asDID } : this.api;
        const updateCommit = await this.makeCommit(signer, content, metadata);
        const updated = await this.api.applyCommit(this.id, updateCommit, opts);
        this.state$.next(updated.state);
    }
    async patch(jsonPatch, opts = {}) {
        opts = { ...DEFAULT_UPDATE_OPTS, ...opts };
        const header = headerFromMetadata(this.metadata, false);
        const rawCommit = {
            header,
            data: jsonPatch,
            prev: this.tip,
            id: this.state$.id.cid,
        };
        const commit = await _signDagJWS(this.api, rawCommit);
        const updated = await this.api.applyCommit(this.id, commit, opts);
        this.state$.next(updated.state);
    }
    makeReadOnly() {
        this.update = throwReadOnlyError;
        this.patch = throwReadOnlyError;
        this.sync = throwReadOnlyError;
        this._isReadOnly = true;
    }
    get isReadOnly() {
        return this._isReadOnly;
    }
    async makeCommit(signer, newContent, newMetadata) {
        var _a;
        const header = headerFromMetadata(newMetadata, false);
        if (newContent == null) {
            newContent = this.content;
        }
        if (header.controllers && ((_a = header.controllers) === null || _a === void 0 ? void 0 : _a.length) !== 1) {
            throw new Error('Exactly one controller must be specified');
        }
        const patch = fast_json_patch_1.default.compare(this.content, newContent);
        const commit = {
            header,
            data: patch,
            prev: this.tip,
            id: this.state.log[0].cid,
        };
        return _signDagJWS(signer, commit);
    }
    static async makeGenesis(signer, content, metadata) {
        var _a;
        if (!metadata) {
            metadata = {};
        }
        if (!metadata.controllers || metadata.controllers.length === 0) {
            if (signer.did) {
                await _ensureAuthenticated(signer);
                metadata.controllers = [signer.did.id];
            }
            else {
                throw new Error('No controllers specified');
            }
        }
        if (((_a = metadata.controllers) === null || _a === void 0 ? void 0 : _a.length) !== 1) {
            throw new Error('Exactly one controller must be specified');
        }
        const header = headerFromMetadata(metadata, true);
        if ((metadata === null || metadata === void 0 ? void 0 : metadata.deterministic) && content) {
            throw new Error('Initial content must be null when creating a deterministic Tile document');
        }
        if (content == null) {
            return { header };
        }
        const commit = { data: content, header };
        return await _signDagJWS(signer, commit);
    }
};
TileDocument.STREAM_TYPE_NAME = 'tile';
TileDocument.STREAM_TYPE_ID = 0;
TileDocument = TileDocument_1 = __decorate([
    common_1.StreamStatic()
], TileDocument);
exports.TileDocument = TileDocument;
//# sourceMappingURL=tile-document.js.map