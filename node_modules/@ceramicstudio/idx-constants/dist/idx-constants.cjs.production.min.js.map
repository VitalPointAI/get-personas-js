{"version":3,"file":"idx-constants.cjs.production.min.js","sources":["../src/index.ts"],"sourcesContent":["type PublishedRecord<K extends string> = Record<K, string>\n\nexport type Attestation = {\n  'did-jwt'?: string\n  'did-jwt-vc'?: string\n}\n\nexport type AlsoKnownAsAccount = {\n  protocol: string\n  id: string\n  host?: string\n  claim?: string\n  attestations?: Array<Attestation>\n}\n\nexport type AlsoKnownAs = {\n  accounts: Array<AlsoKnownAsAccount>\n}\n\nexport type ImageMetadata = {\n  src: string\n  mimeType: string\n  width: number\n  height: number\n  size?: number\n}\n\nexport type ImageSources = {\n  original: ImageMetadata\n  alternatives?: Array<ImageMetadata>\n}\n\nexport type BasicProfile = {\n  name?: string\n  image?: ImageSources\n  description?: string\n  emoji?: string\n  background?: ImageSources\n  birthDate?: string\n  url?: string\n  gender?: string\n  homeLocation?: string\n  residenceCountry?: string\n  nationalities?: Array<string>\n  affiliations?: Array<string>\n}\n\nexport type CryptoAccounts = Record<string, string>\n\nexport type Definition<C extends Record<string, any> = Record<string, any>> = {\n  name: string\n  description: string\n  schema: string\n  url?: string\n  config?: C\n}\n\nexport type IdentityIndex = Record<string, string>\n\nexport type JWERecipient = {\n  header: Record<string, any>\n  encrypted_key: string\n}\n\nexport type JWE = {\n  protected: string\n  iv: string\n  ciphertext: string\n  tag: string\n  aad?: string\n  recipients?: Array<JWERecipient>\n}\n\nexport type WrappedJWE = { jwe: JWE }\n\nexport type AuthData = {\n  id: WrappedJWE\n  pub: string\n  data: WrappedJWE\n}\n\nexport type ThreeIdKeychain = {\n  authMap: Record<string, AuthData>\n  pastSeeds: Array<JWE>\n}\n\nexport type SchemaTypes = {\n  AlsoKnownAs: AlsoKnownAs\n  BasicProfile: BasicProfile\n  CryptoAccounts: CryptoAccounts\n  Definition: Definition\n  IdentityIndex: IdentityIndex\n  ThreeIdKeychain: ThreeIdKeychain\n}\nexport type SchemaName = keyof SchemaTypes\nexport type SchemaType<K extends SchemaName> = SchemaTypes[K]\nexport type PublishedSchemas = PublishedRecord<SchemaName>\n\nexport const schemas: PublishedSchemas = {\n  AlsoKnownAs: 'ceramic://k3y52l7qbv1fryojt8n8cw2k04p9wp67ly59iwqs65dejso566fij5wsdrb871yio',\n  BasicProfile: 'ceramic://k3y52l7qbv1frxt706gqfzmq6cbqdkptzk8uudaryhlkf6ly9vx21hqu4r6k1jqio',\n  CryptoAccounts: 'ceramic://k3y52l7qbv1frypussjburqg4fykyyycfu0p9znc75lv2t5cg4xaslhagkd7h7mkg',\n  Definition: 'ceramic://k3y52l7qbv1fry1fp4s0nwdarh0vahusarpposgevy0pemiykymd2ord6swtharcw',\n  IdentityIndex: 'ceramic://k3y52l7qbv1fryjn62sggjh1lpn11c56qfofzmty190d62hwk1cal1c7qc5he54ow',\n  ThreeIdKeychain: 'ceramic://k3y52l7qbv1frxiodfo6f25wocb8zz60ywqw4sqcprs26qx1qx467l4ybxplybvgg',\n}\n\nexport type DefinitionTypes = {\n  alsoKnownAs: AlsoKnownAs\n  basicProfile: BasicProfile\n  cryptoAccounts: CryptoAccounts\n  threeIdKeychain: ThreeIdKeychain\n}\nexport type DefinitionName = keyof DefinitionTypes\nexport type DefinitionType<K extends DefinitionName> = DefinitionTypes[K]\nexport type PublishedDefinitions = PublishedRecord<DefinitionName>\n\nexport const definitions: PublishedDefinitions = {\n  alsoKnownAs: 'kjzl6cwe1jw146zfmqa10a5x1vry6au3t362p44uttz4l0k4hi88o41zplhmxnf',\n  basicProfile: 'kjzl6cwe1jw145cjbeko9kil8g9bxszjhyde21ob8epxuxkaon1izyqsu8wgcic',\n  cryptoAccounts: 'kjzl6cwe1jw149z4rvwzi56mjjukafta30kojzktd9dsrgqdgz4wlnceu59f95f',\n  threeIdKeychain: 'kjzl6cwe1jw14a50gupo0d433e9ojgmj9rd9ejxkc8vq6lw0fznsoohwzmejqs8',\n}\n"],"names":["alsoKnownAs","basicProfile","cryptoAccounts","threeIdKeychain","AlsoKnownAs","BasicProfile","CryptoAccounts","Definition","IdentityIndex","ThreeIdKeychain"],"mappings":"wFAqHiD,CAC/CA,YAAa,kEACbC,aAAc,kEACdC,eAAgB,kEAChBC,gBAAiB,mFAvBsB,CACvCC,YAAa,8EACbC,aAAc,8EACdC,eAAgB,8EAChBC,WAAY,8EACZC,cAAe,8EACfC,gBAAiB"}