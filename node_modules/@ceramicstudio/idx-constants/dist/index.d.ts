declare type PublishedRecord<K extends string> = Record<K, string>;
export declare type Attestation = {
    'did-jwt'?: string;
    'did-jwt-vc'?: string;
};
export declare type AlsoKnownAsAccount = {
    protocol: string;
    id: string;
    host?: string;
    claim?: string;
    attestations?: Array<Attestation>;
};
export declare type AlsoKnownAs = {
    accounts: Array<AlsoKnownAsAccount>;
};
export declare type ImageMetadata = {
    src: string;
    mimeType: string;
    width: number;
    height: number;
    size?: number;
};
export declare type ImageSources = {
    original: ImageMetadata;
    alternatives?: Array<ImageMetadata>;
};
export declare type BasicProfile = {
    name?: string;
    image?: ImageSources;
    description?: string;
    emoji?: string;
    background?: ImageSources;
    birthDate?: string;
    url?: string;
    gender?: string;
    homeLocation?: string;
    residenceCountry?: string;
    nationalities?: Array<string>;
    affiliations?: Array<string>;
};
export declare type CryptoAccounts = Record<string, string>;
export declare type Definition<C extends Record<string, any> = Record<string, any>> = {
    name: string;
    description: string;
    schema: string;
    url?: string;
    config?: C;
};
export declare type IdentityIndex = Record<string, string>;
export declare type JWERecipient = {
    header: Record<string, any>;
    encrypted_key: string;
};
export declare type JWE = {
    protected: string;
    iv: string;
    ciphertext: string;
    tag: string;
    aad?: string;
    recipients?: Array<JWERecipient>;
};
export declare type WrappedJWE = {
    jwe: JWE;
};
export declare type AuthData = {
    id: WrappedJWE;
    pub: string;
    data: WrappedJWE;
};
export declare type ThreeIdKeychain = {
    authMap: Record<string, AuthData>;
    pastSeeds: Array<JWE>;
};
export declare type SchemaTypes = {
    AlsoKnownAs: AlsoKnownAs;
    BasicProfile: BasicProfile;
    CryptoAccounts: CryptoAccounts;
    Definition: Definition;
    IdentityIndex: IdentityIndex;
    ThreeIdKeychain: ThreeIdKeychain;
};
export declare type SchemaName = keyof SchemaTypes;
export declare type SchemaType<K extends SchemaName> = SchemaTypes[K];
export declare type PublishedSchemas = PublishedRecord<SchemaName>;
export declare const schemas: PublishedSchemas;
export declare type DefinitionTypes = {
    alsoKnownAs: AlsoKnownAs;
    basicProfile: BasicProfile;
    cryptoAccounts: CryptoAccounts;
    threeIdKeychain: ThreeIdKeychain;
};
export declare type DefinitionName = keyof DefinitionTypes;
export declare type DefinitionType<K extends DefinitionName> = DefinitionTypes[K];
export declare type PublishedDefinitions = PublishedRecord<DefinitionName>;
export declare const definitions: PublishedDefinitions;
export {};
