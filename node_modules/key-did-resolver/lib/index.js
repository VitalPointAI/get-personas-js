import varint from 'varint';
import { base58btc } from 'multiformats/bases/base58';
import * as secp256k1 from './secp256k1.js';
import * as ed25519 from './ed25519.js';
import * as secp256r1 from './secp256r1.js';
import * as secp384r1 from './secp384r1.js';
import * as secp521r1 from './secp521r1.js';
const DID_LD_JSON = 'application/did+ld+json';
const DID_JSON = 'application/did+json';
const prefixToDriverMap = {
    0xe7: secp256k1,
    0xed: ed25519,
    0x1200: secp256r1,
    0x1201: secp384r1,
    0x1202: secp521r1
};
export function getResolver() {
    return {
        key: async (did, parsed, r, options) => {
            const contentType = options.accept || DID_JSON;
            const response = {
                didResolutionMetadata: { contentType },
                didDocument: null,
                didDocumentMetadata: {},
            };
            try {
                const multicodecPubKey = base58btc.decode(parsed.id);
                const keyType = varint.decode(multicodecPubKey);
                const pubKeyBytes = multicodecPubKey.slice(varint.decode.bytes);
                const doc = await prefixToDriverMap[keyType].keyToDidDoc(pubKeyBytes, parsed.id);
                if (contentType === DID_LD_JSON) {
                    doc['@context'] = 'https://w3id.org/did/v1';
                    response.didDocument = doc;
                }
                else if (contentType === DID_JSON) {
                    response.didDocument = doc;
                }
                else {
                    delete response.didResolutionMetadata.contentType;
                    response.didResolutionMetadata.error = 'representationNotSupported';
                }
            }
            catch (e) {
                response.didResolutionMetadata.error = 'invalidDid';
                response.didResolutionMetadata.message = e.toString();
            }
            return response;
        },
    };
}
export default { getResolver };
//# sourceMappingURL=index.js.map