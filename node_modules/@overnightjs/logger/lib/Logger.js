"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var colors = require("colors");
var fs = require("fs");
var os = require("os");
var path = require("path");
var util = require("util");
var constants_1 = require("./constants");
var Logger = (function () {
    function Logger(mode, filePath, rmTimestamp, customLogger) {
        this._mode = Logger.initMode();
        this._filePath = Logger.initFilePath();
        this._rmTimestamp = Logger.initRmTimestamp();
        this._customLogger = null;
        if (mode) {
            this._mode = mode;
        }
        if (filePath) {
            this._filePath = filePath;
        }
        if (rmTimestamp) {
            this._rmTimestamp = rmTimestamp;
        }
        if (customLogger) {
            this._customLogger = customLogger;
        }
    }
    Logger.initFilePath = function () {
        if (process.env.OVERNIGHT_LOGGER_FILEPATH) {
            return process.env.OVERNIGHT_LOGGER_FILEPATH;
        }
        else {
            return path.join(os.homedir(), constants_1.DEFAULT_LOG_FILE_NAME);
        }
    };
    Logger.initMode = function () {
        var mode = (process.env.OVERNIGHT_LOGGER_MODE || '').toLocaleUpperCase();
        for (var _i = 0, loggerModeArr_1 = constants_1.loggerModeArr; _i < loggerModeArr_1.length; _i++) {
            var val = loggerModeArr_1[_i];
            if (mode === val) {
                return mode;
            }
        }
        return "CONSOLE";
    };
    Logger.initRmTimestamp = function () {
        var rmTimestamp = (process.env.OVERNIGHT_LOGGER_RM_TIMESTAMP || '').toLocaleUpperCase();
        return rmTimestamp === 'TRUE';
    };
    Object.defineProperty(Logger, "mode", {
        get: function () {
            return Logger._mode;
        },
        set: function (mode) {
            Logger._mode = mode;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Logger.prototype, "mode", {
        get: function () {
            return this._mode;
        },
        set: function (mode) {
            this._mode = mode;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Logger, "filePath", {
        get: function () {
            return Logger._filePath;
        },
        set: function (filePath) {
            Logger._filePath = filePath;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Logger.prototype, "filePath", {
        get: function () {
            return this._filePath;
        },
        set: function (filePath) {
            this._filePath = filePath;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Logger, "rmTimestamp", {
        get: function () {
            return Logger._rmTimestamp;
        },
        set: function (rmTimestamp) {
            Logger._rmTimestamp = rmTimestamp;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Logger.prototype, "rmTimestamp", {
        get: function () {
            return this._rmTimestamp;
        },
        set: function (rmTimestamp) {
            this._rmTimestamp = rmTimestamp;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Logger, "customLogger", {
        get: function () {
            return Logger._customLogger;
        },
        set: function (customLogger) {
            Logger._customLogger = customLogger;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Logger.prototype, "customLogger", {
        get: function () {
            return this._customLogger;
        },
        set: function (customLogger) {
            this._customLogger = customLogger;
        },
        enumerable: true,
        configurable: true
    });
    Logger.Info = function (content, printFull) {
        Logger.PrintLogHelper(content, printFull || false, constants_1.INFO);
    };
    Logger.Imp = function (content, printFull) {
        Logger.PrintLogHelper(content, printFull || false, constants_1.IMP);
    };
    Logger.Warn = function (content, printFull) {
        Logger.PrintLogHelper(content, printFull || false, constants_1.WARN);
    };
    Logger.Err = function (content, printFull) {
        Logger.PrintLogHelper(content, printFull || false, constants_1.ERR);
    };
    Logger.PrintLogHelper = function (content, printFull, logType) {
        Logger.PrintLog(content, printFull, logType, Logger.mode, Logger.rmTimestamp, Logger.filePath, Logger.customLogger);
    };
    Logger.prototype.info = function (content, printFull) {
        this.printLogHelper(content, printFull || false, constants_1.INFO);
    };
    Logger.prototype.imp = function (content, printFull) {
        this.printLogHelper(content, printFull || false, constants_1.IMP);
    };
    Logger.prototype.warn = function (content, printFull) {
        this.printLogHelper(content, printFull || false, constants_1.WARN);
    };
    Logger.prototype.err = function (content, printFull) {
        this.printLogHelper(content, printFull || false, constants_1.ERR);
    };
    Logger.prototype.printLogHelper = function (content, printFull, logType) {
        Logger.PrintLog(content, printFull, logType, this.mode, this.rmTimestamp, this.filePath, this.customLogger);
    };
    Logger.PrintLog = function (content, printFull, logType, mode, rmTimestamp, filePath, customLogger) {
        if (mode === "OFF") {
            return;
        }
        if (printFull) {
            content = util.inspect(content);
        }
        if (!rmTimestamp) {
            var time = '[' + new Date().toISOString() + ']: ';
            content = time + content;
        }
        if (mode === "CONSOLE") {
            content = colors[logType.color](content);
            console.log(content);
        }
        else if (mode === "FILE") {
            Logger.WriteToFile(logType.prefix + content + '\n', filePath);
        }
        else if (mode === "CUSTOM") {
            if (customLogger) {
                customLogger.sendLog(content, logType.prefix);
            }
            else {
                throw Error(Logger.CUSTOM_LOGGER_ERR);
            }
        }
    };
    Logger.WriteToFile = function (content, filePath) {
        try {
            var fileExists = Logger.CheckExists(filePath);
            if (fileExists) {
                fs.appendFileSync(filePath, content);
            }
            else {
                fs.writeFileSync(filePath, content);
            }
        }
        catch (err) {
            console.error(err);
        }
    };
    Logger.CheckExists = function (filePath) {
        try {
            fs.accessSync(filePath);
            return true;
        }
        catch (e) {
            return false;
        }
    };
    Logger._mode = Logger.initMode();
    Logger._filePath = Logger.initFilePath();
    Logger._rmTimestamp = Logger.initRmTimestamp();
    Logger._customLogger = null;
    Logger.CUSTOM_LOGGER_ERR = 'Custom logger mode set to true, but no ' +
        'custom logger was provided.';
    return Logger;
}());
exports.Logger = Logger;
//# sourceMappingURL=Logger.js.map