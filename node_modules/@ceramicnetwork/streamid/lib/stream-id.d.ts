import CID from 'cids';
import { CommitID } from './commit-id';
import { StreamRef } from './stream-ref';
declare function fromBytes(bytes: Uint8Array): StreamID;
declare function fromString(input: string): StreamID;
export declare class StreamID implements StreamRef {
    #private;
    protected readonly _tag: symbol;
    static fromBytes: typeof fromBytes;
    static fromString: typeof fromString;
    static isInstance(instance: any): instance is StreamID;
    constructor(type: string | number, cid: CID | string);
    static fromGenesis(type: string | number, genesis: Record<string, any>): Promise<StreamID>;
    get type(): number;
    get typeName(): string;
    get cid(): CID;
    get bytes(): Uint8Array;
    get baseID(): StreamID;
    atCommit(commit: CID | string | number): CommitID;
    equals(other: StreamID): boolean;
    toString(): string;
    toUrl(): string;
    [Symbol.toPrimitive](): string;
}
export {};
//# sourceMappingURL=stream-id.d.ts.map