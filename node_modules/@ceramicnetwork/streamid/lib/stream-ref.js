"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.StreamRef = void 0;
const stream_id_1 = require("./stream-id");
const commit_id_1 = require("./commit-id");
const uint8arrays = __importStar(require("uint8arrays"));
function tryCatch(f) {
    try {
        return f();
    }
    catch (_a) {
        return null;
    }
}
function complain(message) {
    throw new Error(message);
}
var StreamRef;
(function (StreamRef) {
    function from(input) {
        if (stream_id_1.StreamID.isInstance(input)) {
            return input;
        }
        else if (commit_id_1.CommitID.isInstance(input)) {
            return input;
        }
        else if (input instanceof Uint8Array) {
            return (tryCatch(() => commit_id_1.CommitID.fromBytes(input)) ||
                tryCatch(() => stream_id_1.StreamID.fromBytes(input)) ||
                complain(`Can not build CommitID or StreamID from bytes ${uint8arrays.toString(input, 'base36')}`));
        }
        else if (typeof input === 'string') {
            return (tryCatch(() => commit_id_1.CommitID.fromString(input)) ||
                tryCatch(() => stream_id_1.StreamID.fromString(input)) ||
                complain(`Can not build CommitID or StreamID from string ${input}`));
        }
        else {
            throw new Error(`Can not build CommitID or StreamID`);
        }
    }
    StreamRef.from = from;
})(StreamRef = exports.StreamRef || (exports.StreamRef = {}));
//# sourceMappingURL=stream-ref.js.map