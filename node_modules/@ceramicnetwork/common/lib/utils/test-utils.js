"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TestUtils = void 0;
const operators_1 = require("rxjs/operators");
const rxjs_1 = require("rxjs");
const streamid_1 = require("@ceramicnetwork/streamid");
class FakeRunningState extends rxjs_1.BehaviorSubject {
    constructor(value) {
        super(value);
        this.state = this.value;
        this.id = new streamid_1.StreamID(this.state.type, this.state.log[0].cid);
    }
}
class TestUtils {
    static registerChangeListener(stream) {
        return stream.pipe(operators_1.take(1)).toPromise();
    }
    static async waitForState(stream, timeout, predicate, onFailure) {
        if (predicate(stream.state))
            return;
        const timeoutPromise = new Promise((resolve) => setTimeout(resolve, timeout));
        const completionPromise = stream.pipe(operators_1.filter((state) => predicate(state))).toPromise();
        await Promise.race([timeoutPromise, completionPromise]);
        if (!predicate(stream.state)) {
            onFailure();
        }
    }
    static runningState(state) {
        return new FakeRunningState(state);
    }
}
exports.TestUtils = TestUtils;
//# sourceMappingURL=test-utils.js.map