"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getResolver = exports.wrapDocument = void 0;
const stream_tile_1 = require("@ceramicnetwork/stream-tile");
const legacyResolver_1 = __importDefault(require("./legacyResolver"));
const u8a = __importStar(require("uint8arrays"));
const streamid_1 = require("@ceramicnetwork/streamid");
const cids_1 = __importDefault(require("cids"));
const error_representation_1 = require("./error-representation");
const common_1 = require("@ceramicnetwork/common");
const DID_LD_JSON = 'application/did+ld+json';
const DID_JSON = 'application/did+json';
const isLegacyDid = (didId) => {
    try {
        new cids_1.default(didId);
        return true;
    }
    catch (e) {
        return false;
    }
};
const formatTime = (timestamp) => {
    return new Date(timestamp * 1000).toISOString().split('.')[0] + 'Z';
};
function wrapDocument(content, did) {
    if (!(content && content.publicKeys))
        return null;
    const startDoc = {
        id: did,
        verificationMethod: [],
        authentication: [],
        keyAgreement: [],
    };
    return Object.entries(content.publicKeys).reduce((diddoc, [keyName, keyValue]) => {
        const keyBuf = u8a.fromString(keyValue.slice(1), 'base58btc');
        const entry = {
            id: `${did}#${keyName}`,
            type: '',
            controller: did,
            publicKeyBase58: u8a.toString(keyBuf.slice(2), 'base58btc'),
        };
        if (keyBuf[0] === 0xe7) {
            entry.type = 'EcdsaSecp256k1Signature2019';
            diddoc.verificationMethod.push(entry);
            diddoc.authentication.push(entry);
        }
        else if (keyBuf[0] === 0xec) {
            entry.type = 'X25519KeyAgreementKey2019';
            diddoc.verificationMethod.push(entry);
            diddoc.keyAgreement.push(entry);
        }
        return diddoc;
    }, startDoc);
}
exports.wrapDocument = wrapDocument;
function lastAnchorOrGenesisEntry(log) {
    for (let index = log.length - 1; index >= 0; index--) {
        const entry = log[index];
        if (entry.type === common_1.CommitType.ANCHOR) {
            return entry;
        }
    }
    return log[0];
}
function extractMetadata(requestedVersionState, latestVersionState) {
    const metadata = {};
    const { timestamp: updated, cid: versionId } = lastAnchorOrGenesisEntry(requestedVersionState.log);
    const { timestamp: nextUpdate, cid: nextVersionId } = latestVersionState.log.find(({ timestamp }) => timestamp > updated || (!updated && timestamp)) || {};
    if (updated) {
        metadata.updated = formatTime(updated);
    }
    if (nextUpdate) {
        metadata.nextUpdate = formatTime(nextUpdate);
    }
    if (versionId) {
        metadata.versionId = requestedVersionState.log.length === 1 ? '0' : versionId === null || versionId === void 0 ? void 0 : versionId.toString();
    }
    if (nextVersionId) {
        metadata.nextVersionId = nextVersionId.toString();
    }
    return metadata;
}
function getVersionInfo(query = '') {
    const versionId = query
        .split('&')
        .find((e) => e.includes('versionId') || e.includes('version-id'));
    const versionTime = query.split('&').find((e) => e.includes('versionTime'));
    return {
        commit: versionId ? versionId.split('=')[1] : undefined,
        timestamp: versionTime
            ? Math.floor(new Date(versionTime.split('=')[1]).getTime() / 1000)
            : undefined,
    };
}
const legacyResolve = async (ceramic, didId, verNfo) => {
    const legacyPublicKeys = await legacyResolver_1.default(didId);
    const metadata = { controllers: [legacyPublicKeys.keyDid], family: '3id', deterministic: true };
    const streamid = (await stream_tile_1.TileDocument.create(ceramic, null, metadata, { anchor: false, publish: false })).id;
    const didResult = await resolve(ceramic, streamid.toString(), verNfo, didId);
    if (didResult.didDocument === null) {
        didResult.didDocument = wrapDocument(legacyPublicKeys, `did:3:${didId}`);
    }
    return didResult;
};
const resolve = async (ceramic, didId, verNfo, v03ID) => {
    var _a;
    const streamId = streamid_1.StreamID.fromString(didId);
    let commitId;
    const query = [{ streamId }];
    if (verNfo.commit) {
        commitId = streamId.atCommit(verNfo.commit);
        query.push({ streamId: commitId });
    }
    else if (verNfo.timestamp) {
        query.push({
            streamId,
            atTime: verNfo.timestamp,
        });
    }
    const resp = await ceramic.multiQuery(query);
    const latestVersionState = resp[didId].state;
    const commitIdStr = (commitId === null || commitId === void 0 ? void 0 : commitId.toString()) || Object.keys(resp).find((k) => k !== didId);
    const requestedVersionState = ((_a = resp[commitIdStr]) === null || _a === void 0 ? void 0 : _a.state) || latestVersionState;
    const metadata = extractMetadata(requestedVersionState, latestVersionState);
    const tile = resp[commitIdStr || didId];
    if (commitIdStr && !tile) {
        throw new Error(`No resolution for commit ${commitIdStr}`);
    }
    const content = tile.state.content;
    const document = wrapDocument(content, `did:3:${v03ID || didId}`);
    return {
        didResolutionMetadata: { contentType: DID_JSON },
        didDocument: document,
        didDocumentMetadata: metadata,
    };
};
function getResolver(ceramic) {
    return {
        '3': (did, parsed, resolver, options) => {
            return error_representation_1.withResolutionError(async () => {
                const contentType = options.accept || DID_JSON;
                const verNfo = getVersionInfo(parsed.query);
                const id = parsed.id;
                const didResult = () => {
                    if (isLegacyDid(id)) {
                        return legacyResolve(ceramic, id, verNfo);
                    }
                    else {
                        return resolve(ceramic, id, verNfo);
                    }
                };
                switch (contentType) {
                    case DID_JSON:
                        return didResult();
                    case DID_LD_JSON: {
                        const result = await didResult();
                        result.didDocument['@context'] = 'https://www.w3.org/ns/did/v1';
                        result.didResolutionMetadata.contentType = DID_LD_JSON;
                        return result;
                    }
                    default:
                        return error_representation_1.errorRepresentation({ error: 'representationNotSupported' });
                }
            });
        },
    };
}
exports.getResolver = getResolver;
exports.default = { getResolver };
//# sourceMappingURL=index.js.map