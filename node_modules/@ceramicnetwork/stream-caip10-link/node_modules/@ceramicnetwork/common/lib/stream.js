"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.StreamStatic = exports.Stream = exports.CommitType = exports.AnchorStatus = exports.SignatureStatus = void 0;
const lodash_clonedeep_1 = __importDefault(require("lodash.clonedeep"));
const streamid_1 = require("@ceramicnetwork/streamid");
const rxjs_1 = require("rxjs");
const streamopts_1 = require("./streamopts");
var SignatureStatus;
(function (SignatureStatus) {
    SignatureStatus[SignatureStatus["GENESIS"] = 0] = "GENESIS";
    SignatureStatus[SignatureStatus["PARTIAL"] = 1] = "PARTIAL";
    SignatureStatus[SignatureStatus["SIGNED"] = 2] = "SIGNED";
})(SignatureStatus = exports.SignatureStatus || (exports.SignatureStatus = {}));
var AnchorStatus;
(function (AnchorStatus) {
    AnchorStatus[AnchorStatus["NOT_REQUESTED"] = 0] = "NOT_REQUESTED";
    AnchorStatus[AnchorStatus["PENDING"] = 1] = "PENDING";
    AnchorStatus[AnchorStatus["PROCESSING"] = 2] = "PROCESSING";
    AnchorStatus[AnchorStatus["ANCHORED"] = 3] = "ANCHORED";
    AnchorStatus[AnchorStatus["FAILED"] = 4] = "FAILED";
})(AnchorStatus = exports.AnchorStatus || (exports.AnchorStatus = {}));
var CommitType;
(function (CommitType) {
    CommitType[CommitType["GENESIS"] = 0] = "GENESIS";
    CommitType[CommitType["SIGNED"] = 1] = "SIGNED";
    CommitType[CommitType["ANCHOR"] = 2] = "ANCHOR";
})(CommitType = exports.CommitType || (exports.CommitType = {}));
class Stream extends rxjs_1.Observable {
    constructor(state$, _context) {
        super((subscriber) => {
            state$.subscribe(subscriber);
        });
        this.state$ = state$;
        this._context = _context;
    }
    get id() {
        return new streamid_1.StreamID(this.state$.value.type, this.state$.value.log[0].cid);
    }
    get api() {
        return this._context.api;
    }
    get metadata() {
        var _a;
        const { next, metadata } = this.state$.value;
        return lodash_clonedeep_1.default((_a = next === null || next === void 0 ? void 0 : next.metadata) !== null && _a !== void 0 ? _a : metadata);
    }
    get content() {
        var _a;
        const { next, content } = this.state$.value;
        return lodash_clonedeep_1.default((_a = next === null || next === void 0 ? void 0 : next.content) !== null && _a !== void 0 ? _a : content);
    }
    get controllers() {
        return this.metadata.controllers;
    }
    get tip() {
        return this.state$.value.log[this.state$.value.log.length - 1].cid;
    }
    get commitId() {
        return this.id.atCommit(this.tip);
    }
    get allCommitIds() {
        return this.state$.value.log.map(({ cid }) => this.id.atCommit(cid));
    }
    get anchorCommitIds() {
        return this.state$.value.log
            .filter(({ type }) => type === CommitType.ANCHOR)
            .map(({ cid }) => this.id.atCommit(cid));
    }
    get state() {
        return lodash_clonedeep_1.default(this.state$.value);
    }
    async sync(opts = {}) {
        opts = { sync: streamopts_1.SyncOptions.PREFER_CACHE, ...opts };
        const stream = await this.api.loadStream(this.id, opts);
        this.state$.next(stream.state);
    }
    async requestAnchor() {
        return this.api.requestAnchor(this.id);
    }
}
exports.Stream = Stream;
function StreamStatic() {
    return (constructor) => {
        constructor;
    };
}
exports.StreamStatic = StreamStatic;
//# sourceMappingURL=stream.js.map